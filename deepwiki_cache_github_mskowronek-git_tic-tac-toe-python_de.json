{
  "wiki_structure": {
    "id": "wiki",
    "title": "Tic Tac Toe Python Wiki",
    "description": "This repository contains a Python implementation of the classic Tic Tac Toe game, featuring a command-line interface and game logic.",
    "pages": [
      {
        "id": "page-1",
        "title": "Project Overview",
        "content": "",
        "filePaths": [
          "README.md"
        ],
        "importance": "high",
        "relatedPages": [
          "page-2",
          "page-3"
        ]
      },
      {
        "id": "page-2",
        "title": "Architecture Overview",
        "content": "",
        "filePaths": [
          "main.py",
          "game.py",
          "cli.py",
          "board.py"
        ],
        "importance": "high",
        "relatedPages": [
          "page-1",
          "page-3",
          "page-4"
        ]
      },
      {
        "id": "page-3",
        "title": "Data Flow Description",
        "content": "",
        "filePaths": [
          "game.py",
          "cli.py"
        ],
        "importance": "medium",
        "relatedPages": [
          "page-2",
          "page-4"
        ]
      },
      {
        "id": "page-4",
        "title": "Class Hierarchy",
        "content": "",
        "filePaths": [
          "board.py",
          "game.py",
          "cli.py"
        ],
        "importance": "medium",
        "relatedPages": [
          "page-2",
          "page-3"
        ]
      },
      {
        "id": "page-5",
        "title": "Setup Instructions",
        "content": "",
        "filePaths": [
          "README.md"
        ],
        "importance": "high",
        "relatedPages": [
          "page-1"
        ]
      }
    ],
    "sections": [],
    "rootSections": []
  },
  "generated_pages": {
    "page-1": {
      "id": "page-1",
      "title": "Project Overview",
      "content": "<details>\n<summary>Relevant source files</summary>\n\n- [README.md](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/README.md)\n- [cli.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/cli.py)\n- [main.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/main.py)\n- [game.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/game.py)\n- [board.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/board.py)\n</details>\n\n# Project Overview\n\nThe Tic Tac Toe project is a simple console-based implementation of the classic game in Python. It allows two players to take turns marking their symbols on a 3x3 grid, aiming to align three of their marks either horizontally, vertically, or diagonally. The project structure includes components for game logic, user interface, and board management.\n\n## Architecture Overview\n\nThe project consists of several key components:\n\n### Main Components\n\n- **Board**: Manages the state of the game grid.\n- **Game**: Contains the main logic for running the game, including player turns and win conditions.\n- **CLI**: Handles user interactions and displays game information.\n\n```mermaid\ngraph TD\n    A[Main] --> B[Board]\n    A --> C[Game]\n    A --> D[CLI]\n    B --> E[Create Board]\n    B --> F[Check Board Status]\n    C --> G[Play Game]\n    C --> H[Check Winner]\n    D --> I[Display Board]\n    D --> J[Display Rules]\n```\n\nSources: [main.py:5-10](), [board.py:5-10](), [game.py:5-10](), [cli.py:5-10]()\n\n## Game Flow\n\nThe game flow is straightforward, with players alternating turns until a winner is determined or the game ends in a tie. The game starts by displaying the rules and initializing the board.\n\n### Game Initialization\n\n1. The board is created.\n2. Rules are displayed to the players.\n3. The first player is randomly chosen.\n\n### Player Turns\n\nEach player takes turns to input their move. The following sequence occurs:\n\n```mermaid\nsequenceDiagram\n    participant Player1\n    participant Player2\n    participant Game\n    participant CLI\n    Player1 ->> CLI: Input move\n    CLI -->> Game: Validate move\n    Game ->> CLI: Display board\n    Game ->> Player2: Next turn\n    Player2 ->> CLI: Input move\n    CLI -->> Game: Validate move\n    Game ->> CLI: Display board\n    Game ->> Player1: Next turn\n```\n\nSources: [game.py:15-35](), [cli.py:10-40]()\n\n## Board Management\n\nThe board is represented as a 2D list, where each cell can be empty or occupied by either player. The `Board` class includes methods for creating the board and checking if it is filled.\n\n### Key Board Functions\n\n| Function           | Description                                  |\n|--------------------|----------------------------------------------|\n| `create_board`     | Initializes the board with empty cells.     |\n| `is_board_filled`  | Checks if the board is completely filled.   |\n\nSources: [board.py:5-25]()\n\n## Player Interaction\n\nThe `CLI` class manages all user interactions, including displaying the board, rules, and error messages. It also handles input validation.\n\n### Key CLI Functions\n\n| Function                  | Description                                      |\n|---------------------------|--------------------------------------------------|\n| `display_board`           | Prints the current state of the board.           |\n| `read_position`           | Reads and validates the player's input position.  |\n| `display_winner`          | Displays the winner of the game.                 |\n\nSources: [cli.py:5-40]()\n\n## Conclusion\n\nThe Tic Tac Toe project demonstrates a clean implementation of a classic game using Python, showcasing principles of object-oriented programming, user interaction, and game logic. The modular design allows for easy extensions or modifications, such as adding an AI opponent or enhancing the user interface.",
      "filePaths": [
        "README.md"
      ],
      "importance": "high",
      "relatedPages": [
        "page-2",
        "page-3"
      ]
    },
    "page-2": {
      "id": "page-2",
      "title": "Architecture Overview",
      "content": "<details>\n<summary>Relevant source files</summary>\n\n- [main.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/main.py)\n- [game.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/game.py)\n- [cli.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/cli.py)\n- [board.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/board.py)\n- [README.md](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/README.md)\n</details>\n\n# Architecture Overview\n\nThe architecture of the Tic Tac Toe Python project is designed to provide a simple yet effective implementation of the classic game. This overview will cover the main components of the system, including the board management, game logic, and user interface through the command line. The project is structured to separate concerns, facilitating maintenance and scalability. \n\n## Key Components\n\n### Board Management\n\nThe `Board` class is responsible for creating and managing the game board. It initializes a 3x3 grid and provides methods to check if the board is filled.\n\n```python\n@dataclass\nclass Board:\n    board: list = field(default_factory=list)\n\n    def create_board(self):\n        for i in range(3):\n            row = []\n            for j in range(3):\n                row.append('-')\n            self.board.append(row)\n```\nSources: [board.py:1-10]()\n\n### Game Logic\n\nThe `Game` class orchestrates the gameplay, handling player turns, validating moves, and checking for a winner or a tie. It utilizes the `CLI` class for user interaction.\n\n```python\n@dataclass\nclass Game:\n    board: Board\n    cli: CLI\n\n    def play(self):\n        self.board.create_board()\n        ...\n```\nSources: [game.py:1-10]()\n\n### User Interface\n\nThe `CLI` class manages all user interactions, displaying the game board, rules, and results. It also reads player inputs for their moves.\n\n```python\n@dataclass\nclass CLI:\n    def display_board(self, board: Board) -> None:\n        for row in board.board:\n            for item in row:\n                print(item, end=\" \")\n            print()\n```\nSources: [cli.py:1-10]()\n\n## Game Flow\n\nThe flow of the game can be visualized as follows:\n\n```mermaid\ngraph TD\n    A[Start Game] --> B[Display Rules]\n    B --> C[Create Board]\n    C --> D[Player Turn]\n    D --> E[Check Validity]\n    E -->|Valid| F[Make Move]\n    E -->|Invalid| D\n    F --> G[Check Winner]\n    G -->|Winner| H[Display Winner]\n    G -->|Tie| I[Display Tie]\n    G -->|No Result| D\n```\nThis diagram illustrates the sequence of actions taken during the game, from starting the game to checking for a winner or a tie. Sources: [game.py:10-30]()\n\n## Classes Overview\n\n| Class Name | Description |\n|------------|-------------|\n| `Board`    | Manages the game board and its state. |\n| `Game`     | Contains the game logic and player interactions. |\n| `CLI`      | Handles user interface and input/output operations. |\n\nSources: [board.py:1-10](), [game.py:1-10](), [cli.py:1-10]()\n\n## Conclusion\n\nThe architecture of the Tic Tac Toe Python project emphasizes a clear separation of concerns, with distinct classes managing the board, game logic, and user interface. This design not only simplifies the implementation but also enhances the maintainability of the code. Future enhancements could include a graphical user interface or the ability to play against an AI opponent.",
      "filePaths": [
        "main.py",
        "game.py",
        "cli.py",
        "board.py"
      ],
      "importance": "high",
      "relatedPages": [
        "page-1",
        "page-3",
        "page-4"
      ]
    },
    "page-3": {
      "id": "page-3",
      "title": "Data Flow Description",
      "content": "<details>\n<summary>Relevant source files</summary>\n\n- [game.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/game.py)\n- [cli.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/cli.py)\n- [board.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/board.py)\n- [main.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/main.py)\n- [README.md](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/README.md)\n</details>\n\n# Data Flow Description\n\nThe \"Data Flow Description\" outlines how data moves through the tic-tac-toe game implemented in Python. This section details the interaction between components such as the game logic, user interface, and board representation, providing insights into how player actions are processed and reflected in the game state. The primary components involved are the `Game`, `CLI`, and `Board` classes, each playing a crucial role in the overall functionality.\n\n## Game Architecture\n\n### Components Overview\n\nThe application consists of several key components:\n\n- **Game**: Manages the game logic, including turn management and win condition checks.\n- **CLI**: Handles user input and output, displaying the game state and rules.\n- **Board**: Represents the game board and contains methods to manipulate it.\n\nThe following diagram illustrates the relationships between these components:\n\n```mermaid\ngraph TD\n    A[Game] -->|controls| B[CLI]\n    A -->|manages| C[Board]\n    B -->|displays| C\n```\n\n### Data Flow Process\n\n1. **Game Initialization**: The game starts by creating instances of `Board` and `CLI`. The `Game` class's `play` method is invoked, initiating the game loop (Sources: [main.py:5-7](), [game.py:10]()).\n\n2. **Displaying Rules**: Upon starting, the rules of the game are displayed to the players through the `CLI` (Sources: [cli.py:9-10]()).\n\n3. **Player Turn Management**: The game alternates between two players (X and O). The current player is determined randomly at the start (Sources: [game.py:17-18]()). Each turn involves:\n   - Displaying the current board state.\n   - Prompting the player to enter their move (Sources: [cli.py:24-25]()).\n   - Validating the entered position and updating the board if valid (Sources: [game.py:30-34]()).\n\n### Input Handling\n\nThe `CLI` class handles all user inputs. It captures the row and column indices for the player's move and ensures that the inputs are integers. If invalid, it prompts the user to re-enter (Sources: [cli.py:32-36]()). \n\n```mermaid\nsequenceDiagram\n    participant Player\n    participant CLI\n    participant Game\n    participant Board\n\n    Player ->> CLI: Enter move\n    CLI -->> Game: Validate move\n    Game ->> Board: Update board\n    Board -->> Game: Return board state\n    Game -->> CLI: Display updated board\n```\n\n## Board Management\n\n### Board Structure\n\nThe `Board` class encapsulates the game board as a 3x3 grid, initialized with '-' to represent empty spaces. The `create_board` method sets up this initial state (Sources: [board.py:6-10]()). \n\n### Checking Win Conditions\n\nThe `Game` class contains logic to check for winning conditions. It evaluates rows, columns, and diagonals to determine if a player has won after each move (Sources: [game.py:54-74]()). \n\n```mermaid\nclassDiagram\n    class Game {\n        +play()\n        +check_if_position_is_valid(row, col)\n        +is_winner(player)\n    }\n\n    class CLI {\n        +display_board(board)\n        +read_position()\n    }\n\n    class Board {\n        +create_board()\n        +is_board_filled()\n    }\n\n    Game --> CLI\n    Game --> Board\n```\n\n## Conclusion\n\nThis data flow description highlights the interaction between the game components, detailing how data is processed from user input through to game state updates. Understanding this flow is crucial for further development and debugging within the tic-tac-toe project. The design promotes a clear separation of concerns, making the system modular and easier to maintain.\n\nSources: [cli.py:1-60](), [game.py:1-80](), [board.py:1-20](), [main.py:1-10](), [README.md:5-10]()",
      "filePaths": [
        "game.py",
        "cli.py"
      ],
      "importance": "medium",
      "relatedPages": [
        "page-2",
        "page-4"
      ]
    },
    "page-4": {
      "id": "page-4",
      "title": "Class Hierarchy",
      "content": "<details>\n<summary>Relevant source files</summary>\n\n- [board.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/board.py)\n- [game.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/game.py)\n- [cli.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/cli.py)\n- [main.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/main.py)\n- [README.md](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/README.md)\n</details>\n\n# Class Hierarchy\n\nThe \"Class Hierarchy\" of the Tic Tac Toe Python project is structured around several key classes that facilitate the game's functionality. This includes the management of the game board, the user interface through the command line, and the overall game logic. The architecture is designed to promote clear separation of concerns, allowing for easier maintenance and extensibility.\n\n## Key Classes Overview\n\n### Board Class\n\nThe `Board` class is responsible for managing the game board's state. It provides methods to create the board and check if the board is filled.\n\n```python\n@dataclass\nclass Board:\n    board: list = field(default_factory=list)\n\n    def create_board(self):\n        for i in range(3):\n            row = []\n            for j in range(3):\n                row.append('-')\n            self.board.append(row)\n\n    def is_board_filled(self):\n        for row in self.board:\n            for item in row:\n                if item == '-':\n                    return False\n        return True\n```\nSources: [board.py:1-16]()\n\n### Game Class\n\nThe `Game` class handles the main game logic, including player turns, position validation, and win condition checks. It interacts with both the `Board` and `CLI` classes to manage game flow.\n\n```python\n@dataclass\nclass Game:\n    board: Board\n    cli: CLI\n\n    def play(self):\n        ...\n```\nSources: [game.py:5-8]()\n\n#### Player Management\n\nThe `Players` class is a simple enumeration that defines the two players, represented by \"X\" and \"O\".\n\n```python\nclass Players:\n    one = \"X\"\n    two = \"O\"\n```\nSources: [game.py:3-5]()\n\n### CLI Class\n\nThe `CLI` class manages user interactions via the command line. It displays the game board, rules, and handles user input for selecting positions.\n\n```python\n@dataclass\nclass CLI:\n    def display_board(self, board: Board) -> None:\n        ...\n```\nSources: [cli.py:1-3]()\n\n## Class Relationships\n\nThe following diagram illustrates the relationships between the key classes in the project:\n\n```mermaid\nclassDiagram\n    class CLI {\n        +display_board(board: Board)\n        +display_rules()\n        +read_position() \n    }\n\n    class Board {\n        +create_board()\n        +is_board_filled()\n    }\n\n    class Game {\n        +play()\n        +check_if_position_is_valid(row, col)\n        +is_winner(player)\n    }\n\n    CLI --> Game\n    Game --> Board\n```\nThis diagram shows how the `CLI` class interacts with the `Game` class, which in turn utilizes the `Board` class to manage the game's state. Sources: [cli.py:1-3](), [game.py:5-8](), [board.py:1-16]()\n\n## Game Flow\n\nThe overall flow of the game can be visualized as follows:\n\n```mermaid\ngraph TD\n    A[Start Game] --> B[Display Rules]\n    B --> C[Create Board]\n    C --> D[Player Turn]\n    D --> E[Check Position]\n    E --> F{Valid Position?}\n    F -->|Yes| G[Fix Spot]\n    F -->|No| D\n    G --> H{Winner?}\n    H -->|Yes| I[Display Winner]\n    H -->|No| J{Board Full?}\n    J -->|Yes| K[Display Tie]\n    J -->|No| D\n```\nThis flowchart demonstrates the sequential steps taken during the game, including checking for valid moves and win conditions. Sources: [game.py:12-41](), [cli.py:5-29]()\n\n## Conclusion\n\nThe class hierarchy within the Tic Tac Toe project is well-structured, promoting clear interactions between the game's components. The `Board`, `Game`, and `CLI` classes work together to create an engaging user experience while maintaining a clean separation of responsibilities. This design allows for easier updates and enhancements in the future.",
      "filePaths": [
        "board.py",
        "game.py",
        "cli.py"
      ],
      "importance": "medium",
      "relatedPages": [
        "page-2",
        "page-3"
      ]
    },
    "page-5": {
      "id": "page-5",
      "title": "Setup Instructions",
      "content": "<details>\n<summary>Relevant source files</summary>\n\n- [README.md](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/README.md)\n- [main.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/main.py)\n- [cli.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/cli.py)\n- [game.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/game.py)\n- [board.py](https://github.com/mskowronek-git/tic-tac-toe-python/blob/main/board.py)\n</details>\n\n# Setup Instructions\n\nThe \"Setup Instructions\" section provides a comprehensive guide for configuring and running the Tic Tac Toe game project developed in Python. This project is designed to facilitate a simple yet engaging gameplay experience, allowing two players to compete against each other. The setup instructions are crucial for developers and users to ensure the game runs smoothly in their local environments.\n\n## Prerequisites\n\n### Python Version\nThe project requires Python version 3.10.8. Ensure that this version or a compatible one is installed on your system.\n\n## Installation Steps\n\n### Step 1: Create a Virtual Environment\nIt is recommended to create a virtual environment to manage dependencies. Use the following command:\n\n```bash\npython -m venv venv\n```\n\n### Step 2: Activate the Virtual Environment\nActivate the virtual environment with the appropriate command based on your operating system:\n\n- On Windows:\n  ```bash\n  venv\\Scripts\\activate\n  ```\n\n- On macOS/Linux:\n  ```bash\n  source venv/bin/activate\n  ```\n\n### Step 3: Run the Game\nTo start the game, execute the following command:\n\n```bash\npython main.py\n```\n\nThis command will initiate the main game loop and display the game interface through the command line. The game will guide players through the process and rules of Tic Tac Toe.\n\n## Game Architecture\n\nThe game consists of several key components that interact with each other:\n\n### Class Structure\nThe following classes are central to the game's functionality:\n\n- **Board**: Manages the game board state.\n- **CLI**: Handles user interaction and displays game information.\n- **Game**: Contains the main game logic and flow.\n\n```mermaid\nclassDiagram\n    class Board {\n        +list board\n        +create_board()\n        +is_board_filled()\n    }\n    class CLI {\n        +display_board(Board)\n        +display_rules()\n        +read_position() \n    }\n    class Game {\n        +play()\n        +swap_player_turn(player)\n        +check_if_position_is_valid(row, col)\n        +is_winner(player)\n    }\n    Board --> Game\n    CLI --> Game\n```\nThe above diagram illustrates the relationships between the classes. The `Game` class utilizes both the `Board` and `CLI` classes to manage the game state and user interactions. Sources: [board.py:1-15](), [cli.py:1-30](), [game.py:1-50]().\n\n## Game Flow\n\nThe game follows a structured flow:\n\n1. **Initialization**: The `main()` function initializes the `Game` and `CLI` classes.\n2. **Display Rules**: The rules of the game are displayed to the user.\n3. **Gameplay Loop**: Players take turns inputting their moves until a win or tie condition is met.\n\n```mermaid\nflowchart TD\n    A[Start Game] --> B[Display Rules]\n    B --> C[Player Turn]\n    C --> D[Check Valid Move]\n    D -->|Valid| E[Update Board]\n    E --> F[Check Winner]\n    F -->|Winner| G[Display Winner]\n    F -->|Tie| H[Display Tie]\n    F -->|Continue| C\n```\nThis flowchart depicts the sequence of actions taken during the game. It begins with displaying the rules, then cycles through player turns, move validation, and win/tie checks. Sources: [main.py:1-10](), [game.py:50-100]().\n\n## Conclusion\n\nFollowing these setup instructions will allow users to successfully run the Tic Tac Toe game. The structured approach to game development, with clear class responsibilities and a defined flow, enhances both the maintainability and user experience of the project.",
      "filePaths": [
        "README.md"
      ],
      "importance": "high",
      "relatedPages": [
        "page-1"
      ]
    }
  },
  "repo_url": null,
  "repo": {
    "owner": "mskowronek-git",
    "repo": "tic-tac-toe-python",
    "type": "github",
    "token": null,
    "localPath": null,
    "repoUrl": "https://github.com/mskowronek-git/tic-tac-toe-python"
  },
  "provider": "azure",
  "model": "gpt-4o-mini-EUR-2024-07-18"
}